var searchIndex = new Map(JSON.parse('[\
["syntcalc",{"doc":"","t":"CCPFFGFPPNPNNNNNNNNNNNNPNNPPPPNNNPNNNNPNPPNNNNPPPPNNPPPPPNNNNNNNNNNNNNNPPFPPFPFGEPCNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNCFFNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNPPPEFFGFNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNCFNCNNNNNNNNNNNNNNNNNNNNNSSSSSSSS","n":["parse","tokens","EOI","MathParser","ParseError","Rule","SyntCalc","WHITESPACE","add","all_rules","args","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","div","eq","eval_str","exp","expr","fac","file","fmt","fmt","fmt","fract","from","from","from","from","func","hash","infix","int","into","into","into","into","mul","name","neg","number","parse","partial_cmp","postfix","pow","prefix","primary","sub","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","var","Brace","Brc","Fn","Function","Op","Operator","Tokens","Val","Val","associations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute","compute","from","from","from","from","from_str","from_str","from_str","into","into","into","into","new","to_owned","token_builder","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","val","FnAlias","ValAlias","add_alias","add_alias","borrow","borrow","borrow_mut","borrow_mut","default","default","from","from","get_fn","get_map","get_map","get_val","into","into","new","new","set_map","set_map","try_from","try_from","try_into","try_into","type_id","type_id","Builder","borrow","borrow_mut","brace_from_str","default","from","function_from_str","into","op_from_str","try_from","try_into","type_id","val_from_str","DivisionByZero","IncompatibleUnits","Other","Unit","Val","ValComputeError","ValComputeErrorType","ValOpts","add","base_units","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","div","div_assign","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","get_magnetude","get_unit","into","into","into","into","mul","mul_assign","new","new","options","pow","pow_val","same_unit","set_options","sub","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","Unit","add","base_units","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","from","into","mul","mul_assign","ne","new","pow","same_unit","sub","to_owned","try_from","try_into","type_id","A","CD","D","K","KG","M","MOL","S"],"q":[[0,"syntcalc"],[2,"syntcalc::parse"],[73,"syntcalc::tokens"],[122,"syntcalc::tokens::associations"],[150,"syntcalc::tokens::token_builder"],[163,"syntcalc::tokens::val"],[234,"syntcalc::tokens::val::unit"],[258,"syntcalc::tokens::val::unit::base_units"],[266,"core::cmp"],[267,"core::result"],[268,"core::fmt"],[269,"core::fmt"],[270,"pest::iterators::pairs"],[271,"pest::error"],[272,"core::option"],[273,"alloc::string"],[274,"core::any"],[275,"alloc::vec"],[276,"std::collections::hash::map"]],"d":["","","End-of-input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A binary operator struct","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Struct that represents a mathematical value with unit","Error for math value E. g. trying to sum numbers with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Struct that represents number’s Unit","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,0,0,1,1,1,1,9,5,1,34,9,5,1,34,1,1,1,5,1,1,5,1,1,1,1,9,9,1,1,9,5,1,34,1,1,1,1,9,5,1,34,1,1,1,1,34,1,1,1,1,1,1,1,9,9,5,1,34,9,5,1,34,9,5,1,34,1,1,0,35,35,0,35,0,0,0,35,0,35,20,23,19,35,20,23,19,19,19,20,19,35,20,23,19,20,23,19,35,20,23,19,19,19,0,35,20,23,19,35,20,23,19,35,20,23,19,0,0,0,26,24,26,24,26,24,26,24,26,24,24,26,24,26,26,24,26,24,26,24,26,24,26,24,26,24,0,28,28,28,28,28,28,28,28,28,28,28,28,30,30,30,0,0,0,0,0,8,0,21,30,29,8,21,30,29,8,29,8,29,8,29,8,8,8,8,21,21,30,30,29,8,21,30,29,8,8,8,8,21,30,29,8,8,8,21,8,8,8,8,8,8,8,29,8,21,30,21,30,29,8,21,30,29,8,21,30,29,8,0,0,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],3,[],[]],[[1,1],4],[[],5],0,[[1,1],6],[[5,7],[[10,[8,9]]]],0,0,0,0,[[9,11],12],[[9,11],12],[[1,11],12],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[1,-1],3,13],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[1,7],[[10,[[14,[1]],[15,[1]]]]]],[[1,1],[[16,[4]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,17,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[[-1,-2],3,[],[]],[[20,8,8],[[10,[8,21]]]],[[19,[22,[8]]],[[10,[8,7]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[7,[[10,[20,17]]]],[7,[[10,[23,17]]]],[[7,24],[[10,[19,17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,19],[-1,-2,[],[]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,[[26,17,8],3],[[24,17,19],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],26],[[],24],[-1,-1,[]],[-1,-1,[]],[[24,7],[[16,[19]]]],[26,[[27,[17,8]]]],[24,[[27,[17,19]]]],[[26,7],[[16,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[],26],[[],24],[[26,[27,[17,8]]],26],[[24,[27,[17,19]]],24],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[28,7],[[10,[23,17]]]],[[],28],[-1,-1,[]],[[28,7],[[10,[19,17]]]],[-1,-2,[],[]],[[28,7],[[10,[20,17]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[[28,7],[[10,[8,17]]]],0,0,0,0,0,0,0,0,[[8,8],-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[8,8],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],29],[[],8],[[8,8],-1,[]],[[8,8],3],[[8,8],6],[[21,11],12],[[21,11],12],[[30,11],12],[[30,11],12],[[29,11],12],[[8,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[7,26],[[10,[8,17]]]],[8,31],[8,32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,8],-1,[]],[[8,8],3],[[17,30],21],[[31,32],8],0,[[8,31],8],[[8,8],[[10,[8,21]]]],[[8,8],6],[[8,29],8],[[8,8],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,[[32,32],-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[[-1,-2],3,[],[]],[[32,32],-1,[]],[[32,32],3],[[32,32],6],[[32,11],12],[-1,-1,[]],[-1,-2,[],[]],[[32,32],-1,[]],[[32,32],3],[[32,32],6],[[[33,[31]]],32],[[32,31],32],[[32,32,31],6],[[32,32],-1,[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,0,0,0,0,0,0],"c":[],"p":[[6,"Rule",2],[1,"slice"],[1,"tuple"],[6,"Ordering",266],[5,"SyntCalc",2],[1,"bool"],[1,"str"],[5,"Val",163],[5,"ParseError",2],[6,"Result",267],[5,"Formatter",268],[8,"Result",268],[10,"Hasher",269],[5,"Pairs",270],[5,"Error",271],[6,"Option",272],[5,"String",273],[5,"TypeId",274],[5,"Function",73],[5,"Operator",73],[5,"ValComputeError",163],[5,"Vec",275],[5,"Brace",73],[5,"FnAlias",122],[1,"i32"],[5,"ValAlias",122],[5,"HashMap",276],[5,"Builder",150],[5,"ValOpts",163],[6,"ValComputeErrorType",163],[1,"f64"],[5,"Unit",234],[1,"array"],[5,"MathParser",2],[6,"Tokens",73]],"b":[[30,"impl-Debug-for-ParseError"],[31,"impl-Display-for-ParseError"],[190,"impl-Display-for-ValComputeError"],[191,"impl-Debug-for-ValComputeError"],[192,"impl-Debug-for-ErrorType"],[193,"impl-Display-for-ErrorType"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
